{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HW8","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOlvj/RhJUlhQgUyXhgDEJ4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2-YgtUI-iNqe","executionInfo":{"status":"ok","timestamp":1644806199930,"user_tz":-480,"elapsed":6144,"user":{"displayName":"mark wu","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04816660482965861860"}},"outputId":"55c4855a-ddc6-4d79-b7b5-32bc946d4a8c"},"outputs":[{"output_type":"stream","name":"stdout","text":["  Building wheel for qqdm (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["!pip install -q qqdm"]},{"cell_type":"code","source":["!gdown --id '15XWO-zI-AKW0igfwSydmwSGa8ENb9wCg' --output data-bin.tar.gz"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ubVQRhzyjz7g","executionInfo":{"status":"ok","timestamp":1644806218460,"user_tz":-480,"elapsed":16312,"user":{"displayName":"mark wu","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04816660482965861860"}},"outputId":"17ad0dff-014a-482f-b8ee-65efebef8864"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading...\n","From: https://drive.google.com/uc?id=15XWO-zI-AKW0igfwSydmwSGa8ENb9wCg\n","To: /content/data-bin.tar.gz\n","100% 1.64G/1.64G [00:14<00:00, 110MB/s]\n"]}]},{"cell_type":"code","source":["!tar zxvf data-bin.tar.gz\n","!ls data-bin\n","!ls data-bin\n","!rm data-bin.tar.gz"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"io38vkTkkCN2","executionInfo":{"status":"ok","timestamp":1644806244788,"user_tz":-480,"elapsed":25455,"user":{"displayName":"mark wu","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04816660482965861860"}},"outputId":"3fb877b9-610e-49f4-a428-7d055b1fca80"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["data-bin/\n","data-bin/testingset.npy\n","data-bin/trainingset.npy\n","testingset.npy\ttrainingset.npy\n","testingset.npy\ttrainingset.npy\n"]}]},{"cell_type":"code","source":["!nvidia-smi"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"paNyV5csew_y","executionInfo":{"status":"ok","timestamp":1644806247243,"user_tz":-480,"elapsed":248,"user":{"displayName":"mark wu","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04816660482965861860"}},"outputId":"23753ca9-741b-4268-9214-b422296e242c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mon Feb 14 02:37:21 2022       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla K80           Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   32C    P8    29W / 149W |      0MiB / 11441MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import random\n","import torch\n","\n","from torch.utils.data import DataLoader\n","from torch.utils.data import (DataLoader, RandomSampler, SequentialSampler, TensorDataset)\n","\n","import torchvision.transforms as transforms\n","\n","from torch import nn\n","import torch.nn.functional as F\n","from torch.autograd import Variable\n","import torchvision.models as models\n","\n","from torch.optim import Adam, AdamW\n","\n","from sklearn.cluster import MiniBatchKMeans\n","from scipy.cluster.vq import vq, kmeans\n","\n","from qqdm import qqdm, format_str\n","import pandas as pd\n","\n","import pdb"],"metadata":{"id":"zBOEBzf2keyS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train = np.load('data-bin/trainingset.npy', allow_pickle= True)\n","test = np.load('data-bin/testingset.npy', allow_pickle= True)\n","\n","print(train.shape)\n","print(test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CrS-aJ2vmAth","executionInfo":{"status":"ok","timestamp":1644806261126,"user_tz":-480,"elapsed":890,"user":{"displayName":"mark wu","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04816660482965861860"}},"outputId":"187b2312-56d4-4b98-ecbd-4f552da118c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(140001, 64, 64, 3)\n","(19999, 64, 64, 3)\n"]}]},{"cell_type":"code","source":["def same_seeds(seed):\n","  random.seed(seed)\n","  np.random.seed(seed)\n","  torch.manual_seed(seed)\n","  if torch.cuda.is_available():\n","    torch.cuda.manual_seed(seed)\n","    torch.cuda.manual_seed_all(seed)\n","  torch.backends.cudnn.benchmark = False\n","  torch.backends.cudnn.deterministic = True\n","\n","same_seeds(2022)"],"metadata":{"id":"dhN-FzE2mb9r"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class fcn_autoencoder(nn.Module):\n","  def __init__(self):\n","    super(fcn_autoencoder, self).__init__()\n","    self.encoder = nn.Sequential(\n","        nn.Linear(64 * 64 * 3, 128),\n","        nn.ReLU(True),\n","        nn.Linear(128, 64),\n","        nn.ReLU(True),\n","        nn.Linear(64, 12),\n","        nn.ReLU(True),\n","        nn.Linear(12, 3))\n","    \n","    self.decoder = nn.Sequential(\n","        nn.Linear(3, 12),\n","        nn.ReLU(True),\n","        nn.Linear(12, 64),\n","        nn.ReLU(True),\n","        nn.Linear(64, 128),\n","        nn.ReLU(True),\n","        nn.Linear(128, 64 * 64 * 3),\n","        nn.Tanh())\n","    \n","  def forward(self, x):\n","    x = self.encoder(x)\n","    x = self.decoder(x)\n","    return x\n","\n","\n","class conv_autoencoder(nn.Module):\n","  def __init__(self):\n","    super(conv_autoencoder, self).__init__()\n","    self.encoder = nn.Sequential(\n","        nn.Conv2d(3, 12, 4, stride= 2, padding= 1),\n","        nn.ReLU(),\n","        nn.Conv2d(12, 24, 4, stride= 2, padding= 1),\n","        nn.ReLU(),\n","        nn.Conv2d(24, 48, 4, stride= 2, padding= 1),\n","        nn.ReLU(),\n","        nn.Conv2d(48, 96, 4, stride= 2, padding= 1),\n","        nn.ReLU())\n","    \n","    self.decoder = nn.Sequential(\n","        nn.ConvTranspose2d(96, 48, 4, stride= 2, padding= 1),\n","        nn.ReLU(),\n","        nn.ConvTranspose2d(48, 24, 4, stride= 2, padding= 1),\n","        nn.ReLU(),\n","        nn.ConvTranspose2d(24, 12, 4, stride= 2, padding= 1),\n","        nn.ReLU(),\n","        nn.ConvTranspose2d(12, 3, 4, stride= 2, padding= 1),\n","        nn.Tanh())\n","    \n","  def forward(self, x):\n","    x = self.encoder(x)\n","    x = self.decoder(x)\n","    return x\n","\n","\n","class VAE(nn.Module):\n","    def __init__(self):\n","      super(VAE, self).__init__()\n","      self.encoder = nn.Sequential(\n","          nn.Conv2d(3, 12, 4, stride= 2, padding= 1),\n","          nn.ReLU(),\n","          nn.Conv2d(12, 24, 4, stride= 2, padding= 1),\n","          nn.ReLU(),\n","      )\n","\n","      self.enc_out_1 = nn.Sequential(\n","          nn.Conv2d(24, 48, 4, stride= 2, padding= 1),\n","          nn.ReLU(),\n","      )\n","      \n","      self.enc_out_2 = nn.Sequential(\n","          nn.Conv2d(24, 48, 4, stride= 2, padding= 1),\n","          nn.ReLU(),\n","      )\n","      \n","      self.decoder = nn.Sequential(\n","          nn.ConvTranspose2d(48, 24, 4, stride= 2, padding= 1),\n","          nn.ReLU(),\n","          nn.ConvTranspose2d(24, 12, 4, stride= 2, padding= 1),\n","          nn.ReLU(),\n","          nn.ConvTranspose2d(12, 3, 4, stride= 2, padding= 1),\n","          nn.Tanh(),\n","      )\n","    def encode(self, x):\n","      h1 = self.encoder(x)\n","      return self.enc_out_1(h1), self.enc_out_2(h1)\n","\n","    def reparametrize(self, mu, logvar):\n","      std = logvar.mul(0.5).exp_()\n","      if torch.cuda.is_available():\n","          eps = torch.cuda.FloatTensor(std.size()).normal_()\n","      else:\n","          eps = torch.FloatTensor(std.size()).normal_()\n","      eps = Variable(eps)\n","      return eps.mul(std).add_(mu)\n","\n","    def decode(self, z):\n","      return self.decoder(z)\n","\n","    def forward(self, x):\n","      mu, logvar = self.encode(x)\n","      z = self.reparametrize(mu, logvar)\n","      return self.decode(z), mu, logvar\n","\n","def loss_vae(recon_x, x, mu, logvar, criterion):\n","  mse = criterion(recon_x, x)\n","  KLD_element = mu.pow(2).add_(logvar.exp()).mul_(-1).add_(1).add_(logvar)\n","  KLD = torch.sum(KLD_element).mul_(-0.5)\n","  return mse + KLD\n","\n","class Resnet(nn.Module):\n","  def __init__(self, fc_hidden1= 1024, fc_hidden2= 768, drop_p= 0.3, CNN_embed_dim= 256):\n","    super(Resnet, self).__init__()\n","\n","    self.fc_hidden1, self.fc_hidden2, self.CNN_embed_dim = fc_hidden1, fc_hidden2, CNN_embed_dim\n","    self.ch1, self.ch2, self.ch3, self.ch4 = 16, 32, 64, 128\n","    self.k1, self.k2, self.k3, self.k4 = (5, 5), (3, 3), (3, 3), (3, 3)\n","    self.s1, self.s2, self.s3, self.s4 = (2, 2), (2, 2), (2, 2), (2, 2)\n","    self.pd1, self.pd2, self.pd3, self.pd4 = (0, 0), (0, 0), (0, 0), (0, 0)\n","\n","    resnet = models.resnet18(pretrained= False)\n","    modules = list(resnet.children())[:-1]\n","    self.resnet = nn.Sequential(*modules)\n","    self.fc1 = nn.Linear(resnet.fc.in_features, self.fc_hidden1)\n","    self.bn1 = nn.BatchNorm1d(self.fc_hidden1, momentum= 0.01)\n","    self.fc2 = nn.Linear(self.fc_hidden1, self.fc_hidden2)\n","    self.bn2 = nn.BatchNorm1d(self.fc_hidden2, momentum= 0.01)\n","\n","    self.fc3_mu = nn.Linear(self.fc_hidden2, self.CNN_embed_dim)\n","\n","    self.fc4 = nn.Linear(self.CNN_embed_dim, self.fc_hidden2)\n","    self.fc_bn4 = nn.BatchNorm1d(self.fc_hidden2)\n","    self.fc5 = nn.Linear(self.fc_hidden2, 64 * 4 * 4)\n","    self.fc_bn5 = nn.BatchNorm1d(64 * 4 * 4)\n","    self.relu = nn.ReLU(inplace= True)\n","\n","    self.convTrans6 = nn.Sequential(\n","        nn.ConvTranspose2d(in_channels= 64, out_channels= 32, kernel_size= self.k4, stride= self.s4,\n","                           padding= self.pd4),\n","        nn.BatchNorm2d(32, momentum= 0.01),\n","        nn.ReLU(inplace= True),\n","    )\n","    self.convTrans7 = nn.Sequential(\n","        nn.ConvTranspose2d(in_channels= 32, out_channels= 8, kernel_size= self.k3, stride= self.s3,\n","                           padding= self.pd3),\n","        nn.BatchNorm2d(8, momentum= 0.01),\n","        nn.ReLU(inplace= True),\n","    )\n","    self.convTrans8 = nn.Sequential(\n","        nn.ConvTranspose2d(in_channels= 8, out_channels= 3, kernel_size= self.k2, stride= self.s2,\n","                           padding= self.pd2),\n","        nn.BatchNorm2d(3, momentum= 0.01),\n","        nn.Sigmoid(),\n","    )\n","  def encode(self, x):\n","    x = self.resnet(x)\n","    x = x.view(x.size(0), -1)\n","\n","    if x.shape[0] > 1:\n","      x = self.bn1(self.fc1(x))\n","    else:\n","      x = self.fc1(x)\n","    x = self.relu(x)\n","    if x.shape[0] > 1:\n","      x = self.bn2(self.fc2(x))\n","    else:\n","      x = self.fc2(x)\n","    x = self.relu(x)\n","    x = self.fc3_mu(x)\n","    return x\n","  \n","  def decode(self, z):\n","    if z.shape[0] > 1:\n","      x = self.relu(self.fc_bn4(self.fc4(z)))\n","      x = self.relu(self.fc5(x)).view(-1, 64, 4, 4)\n","    else:\n","      x = self.relu(self.fc4(z))\n","      x = self.relu(self.fc5(x)).view(-1, 64, 4, 4)\n","    x = self.convTrans6(x)\n","    x = self.convTrans7(x)\n","    x = self.convTrans8(x)\n","    x = F.interpolate(x, size= (64, 64), mode= 'bilinear', align_corners= True)\n","    return x\n","  def forward(self, x):\n","    z = self.encode(x)\n","    x_reconst = self.decode(z)\n","    return x_reconst"],"metadata":{"id":"cfQQIbHEnG3p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class CustomTensorDataset(TensorDataset):\n","  def __init__(self, tensors):\n","    self.tensors = tensors\n","    if tensors.shape[-1] == 3:\n","     self.tensors = tensors.permute(0, 3, 1, 2)\n","     self.transform = transforms.Compose([\n","                        transforms.Lambda(lambda x: x.to(torch.float32)),\n","                        transforms.Lambda(lambda x: 2. * x/255. -1.),\n","                        #transforms.Normalize([0.5, 0.5, 0.5 ],[0.5, 0.5, 0.5]),\n","                        ])\n","  def __getitem__(self, idx):\n","    x = self.tensors[idx]\n","\n","    if self.transform:\n","        x = self.transform(x)\n","\n","    return x\n","\n","  def __len__(self):\n","    return len(self.tensors)\n","\n"],"metadata":{"id":"ERZyUce73xBt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_epochs = 5\n","batch_size = 10000\n","learning_rate = 1e-4\n","\n","x = torch.from_numpy(train)\n","train_dataset = CustomTensorDataset(x)\n","\n","train_sampler = RandomSampler(train_dataset)\n","train_dataloader = DataLoader(train_dataset, sampler= train_sampler, batch_size= batch_size)\n","\n","model_type = 'resnet' # selecting a model type from {'cnn', 'fcn', 'vae', 'resnet'}\n","model_classes = {'resnet': Resnet(), 'fcn': fcn_autoencoder(), 'cnn': conv_autoencoder(), 'vae': VAE(), }\n","model = model_classes[model_type].cuda()\n","\n","criterion = nn.MSELoss()\n","optimizer = torch.optim.Adam(\n","    model.parameters(), lr= learning_rate)"],"metadata":{"id":"4c0IKOaV5VtR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["best_loss = np.inf\n","model.train()\n","\n","qqdm_train = qqdm(range(num_epochs), desc= format_str('bold', 'Description'))\n","for epoch in qqdm_train:\n","  tot_loss = list()\n","  for data in train_dataloader:\n","    if model_type in ['cnn', 'vae', 'resnset']:\n","      img = data.float().cuda()\n","    elif model_type in ['fcn']:\n","      img = data.float().cuda()\n","      img = img.view(img.shape[0], -1)\n","\n","    output = model(img)\n","    if model_type in ['vae']:\n","      loss = loss_vae(output[0], img, output[1], output[2], criterion)\n","    else:\n","      loss = criterion(output, img)\n","\n","    tot_loss.append(loss.item())\n","\n","    optimizer.zero_grad()\n","    loss.backward()\n","    optimizer.step()\n","\n","  mean_loss = np.mean(tot_loss)\n","  if mean_loss < best_loss:\n","    best_loss = mean_loss\n","    torch.save(model, 'best_model_{}.pt'.format(model_type))\n","    \n","  qqdm_train.set_infos({\n","    'epoch': f'{epoch + 1:.0f}/{num_epochs:.0f}',\n","    'loss': f'{mean_loss:.4f}',\n","  })\n","\n","  torch.save(model, 'last_model_{}.pt'.format(model_type))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xrsp3_8Lgf0H","executionInfo":{"status":"ok","timestamp":1644809772516,"user_tz":-480,"elapsed":85115,"user":{"displayName":"mark wu","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04816660482965861860"}},"outputId":"f74c8398-8604-4027-946a-b7c891a20349"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":[" \u001b[1mIters\u001b[0m    \u001b[1mElapsed Time\u001b[0m      \u001b[1mSpeed\u001b[0m                                               \n","  \u001b[99m0/\u001b[93m5\u001b[0m\u001b[0m   \u001b[99m        -        \u001b[0m  \u001b[99m   -    \u001b[0m                                             \n","\u001b[1mDescription\u001b[0m   0.0% |                                                           |\u001b[K\u001b[F\u001b[K\u001b[F \u001b[1mIters\u001b[0m    \u001b[1mElapsed Time\u001b[0m      \u001b[1mSpeed\u001b[0m    \u001b[1mepoch\u001b[0m   \u001b[1mloss\u001b[0m                               \n","  \u001b[99m1/\u001b[93m5\u001b[0m\u001b[0m   \u001b[99m00:00:17<\u001b[93m00:01:08\u001b[0m\u001b[0m  \u001b[99m0.06it/s\u001b[0m   \u001b[99m1/5\u001b[0m   \u001b[99m0.6942\u001b[0m                              \n","\u001b[1mDescription\u001b[0m  20.0% |\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m                                                |\u001b[K\u001b[F\u001b[K\u001b[F \u001b[1mIters\u001b[0m    \u001b[1mElapsed Time\u001b[0m      \u001b[1mSpeed\u001b[0m    \u001b[1mepoch\u001b[0m   \u001b[1mloss\u001b[0m                               \n","  \u001b[99m2/\u001b[93m5\u001b[0m\u001b[0m   \u001b[99m00:00:33<\u001b[93m00:00:50\u001b[0m\u001b[0m  \u001b[99m0.06it/s\u001b[0m   \u001b[99m2/5\u001b[0m   \u001b[99m0.6717\u001b[0m                              \n","\u001b[1mDescription\u001b[0m  40.0% |\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m                                    |\u001b[K\u001b[F\u001b[K\u001b[F \u001b[1mIters\u001b[0m    \u001b[1mElapsed Time\u001b[0m      \u001b[1mSpeed\u001b[0m    \u001b[1mepoch\u001b[0m   \u001b[1mloss\u001b[0m                               \n","  \u001b[99m3/\u001b[93m5\u001b[0m\u001b[0m   \u001b[99m00:00:50<\u001b[93m00:00:33\u001b[0m\u001b[0m  \u001b[99m0.06it/s\u001b[0m   \u001b[99m3/5\u001b[0m   \u001b[99m0.6583\u001b[0m                              \n","\u001b[1mDescription\u001b[0m  60.0% |\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m                        |\u001b[K\u001b[F\u001b[K\u001b[F \u001b[1mIters\u001b[0m    \u001b[1mElapsed Time\u001b[0m      \u001b[1mSpeed\u001b[0m    \u001b[1mepoch\u001b[0m   \u001b[1mloss\u001b[0m                               \n","  \u001b[99m4/\u001b[93m5\u001b[0m\u001b[0m   \u001b[99m00:01:07<\u001b[93m00:00:16\u001b[0m\u001b[0m  \u001b[99m0.06it/s\u001b[0m   \u001b[99m4/5\u001b[0m   \u001b[99m0.6470\u001b[0m                              \n","\u001b[1mDescription\u001b[0m  80.0% |\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m            |\u001b[K\u001b[F\u001b[K\u001b[F \u001b[1mIters\u001b[0m    \u001b[1mElapsed Time\u001b[0m      \u001b[1mSpeed\u001b[0m    \u001b[1mepoch\u001b[0m   \u001b[1mloss\u001b[0m                               \n","  \u001b[99m5/\u001b[93m5\u001b[0m\u001b[0m   \u001b[99m00:01:24<\u001b[93m00:00:00\u001b[0m\u001b[0m  \u001b[99m0.06it/s\u001b[0m   \u001b[99m5/5\u001b[0m   \u001b[99m0.6369\u001b[0m                              \n","\u001b[1mDescription\u001b[0m 100.0% |\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m|\u001b[K\u001b[F\u001b[K\u001b[F \u001b[1mIters\u001b[0m    \u001b[1mElapsed Time\u001b[0m      \u001b[1mSpeed\u001b[0m    \u001b[1mepoch\u001b[0m   \u001b[1mloss\u001b[0m                               \n","  \u001b[99m5/\u001b[93m5\u001b[0m\u001b[0m   \u001b[99m00:01:24<\u001b[93m00:00:00\u001b[0m\u001b[0m  \u001b[99m0.06it/s\u001b[0m   \u001b[99m5/5\u001b[0m   \u001b[99m0.6369\u001b[0m                              \n","\u001b[1mDescription\u001b[0m 100.0% |\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m\u001b[97m█\u001b[0m|"]}]},{"cell_type":"code","source":["eval_batch_size = 200\n","\n","data = torch.tensor(test, dtype= torch.float32)\n","test_dataset = CustomTensorDataset(data)\n","test_sampler = SequentialSampler(test_dataset)\n","test_dataloader = DataLoader(test_dataset, sampler= test_sampler, batch_size= eval_batch_size, num_workers= 1)\n","eval_loss = nn.MSELoss(reduction= 'none')\n","\n","checkpoint_path = 'best_model_{}.pt'.format(model_type) \n","model = torch.load(checkpoint_path)\n","model.eval()\n","\n","out_file = 'PREDICTION_FILE.csv'"],"metadata":{"id":"L4cRiizksBHb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["anomality= list()\n","with torch.no_grad():\n","  for i, data in enumerate(test_dataloader):\n","    if model_type in ['cnn', 'vae', 'resnet']:\n","      img = data.float().cuda()\n","    elif model_type in ['fcn']:\n","      img = data.float().cuda()\n","      img = img.view(img.shape[0], -1)\n","    else:\n","      img = data[0].cuda()\n","    output = model(img)\n","    if model_type in ['cnn', 'fcn', 'resnet']:\n","      output = output\n","    elif model_type in ['res_vae']:\n","      output = output[0]\n","    elif model_type in ['vae']:\n","      output = output[0]\n","    if model_type in ['fcn']:\n","      loss = eval_loss(output, img).sum(-1)\n","    else:\n","      loss = eval_loss(output, img).sum([1, 2, 3])\n","    anomality.append(loss)\n","  anomality = torch.cat(anomality, axis= 0)\n","  anomality = torch.sqrt(anomality).reshape(len(test), 1).cpu().numpy()\n","\n","  df = pd.DataFrame(anomality, columns= ['Predicted'])\n","  df.to_csv(out_file, index_label = 'Id')"],"metadata":{"id":"EJtbD8hls4KX"},"execution_count":null,"outputs":[]}]}